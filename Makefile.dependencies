# TODO more granular submodule rebuild on update
# For local development convenience
submodule_update_log := $(shell git status &> /dev/null && \
	git submodule update --recursive --init)
ifneq (, $(submodule_update_log))
$(info Submodules changed, resetting them...)
_ := $(shell git submodule deinit --all --force)
_ := $(shell git submodule update --recursive --init)
endif

DEPENDENCIES = \
	submodules/cryptopp/ok \
	submodules/openssl/ok \
	submodules/ethash/ok \
	submodules/secp256k1/ok \
	submodules/libff/ok \
	submodules/taraxa-vdf/ok \
	submodules/taraxa-vrf/ok \
	submodules/taraxa-evm/ok \
	submodules/prometheus-cpp/ok

OPENSSL_HOME = $(shell pwd)/submodules/openssl/
git_clean := git status &> /dev/null && git clean -dfx

submodules/cryptopp/ok:
	@echo Attempting to compile cryptopp, if it fails try compiling it manually
	cd submodules/cryptopp; $(git_clean); \
	if [ $(shell uname) = 'Darwin' ]; then \
		$(MAKE); \
	else \
		$(MAKE) CXXFLAGS="-DNDEBUG -g2 -O3 -fPIC \
			-DCRYPTOPP_DISABLE_ASM -pthread -pipe -c"; \
	fi; \
	test $$? -eq 0 && \
	touch ok

submodules/ethash/ok:
	@echo Attempting to compile ethash, if it fails try compiling it manually
	cd submodules/ethash; $(git_clean); \
	mkdir -p build; cd build; \
	cmake ..; \
	$(MAKE) && \
	touch ../ok

submodules/libff/ok:
	@echo Attempting to compile libff, if it fails try compiling it manually
	cd submodules/libff; $(git_clean); \
	mkdir -p build; cd build; \
	cmake .. -DWITH_PROCPS=Off \
		-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=c++ \
		-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \
		-DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib; \
	$(MAKE) && \
	touch ../ok

submodules/secp256k1/ok:
	@echo Attempting to compile libsecp256k1, \
	if it fails try compiling it manually
	cd submodules/secp256k1; $(git_clean); \
	./autogen.sh; \
	./configure --disable-shared --disable-tests \
		--disable-coverage --disable-openssl-tests --disable-exhaustive-tests \
		--disable-jni --with-bignum=no --with-field=64bit --with-scalar=64bit \
		--with-asm=no --enable-module-ecdh --enable-module-recovery \
		--enable-experimental; \
	$(MAKE) && \
	touch ok

submodules/prometheus-cpp/ok:
	@echo Attempting to compile libprometheus, if it fails try compiling it \
	manually. See https://github.com/jupp0r/prometheus-cpp
	cd submodules/prometheus-cpp; $(git_clean); \
	git submodule update --init 3rdparty/civetweb/; \
	mkdir -p _build; cd _build; \
	cmake .. -DBUILD_SHARED_LIBS=OFF -DENABLE_TESTING=OFF; \
	$(MAKE) && \
	$(MAKE) DESTDIR=`pwd`/deploy install && \
	touch ../ok

submodules/taraxa-evm/ok:
	@echo Building Go trx engine static C library
	cd submodules/taraxa-evm; $(git_clean); \
	go build -tags=secp256k1_no_cgo -buildmode=c-archive \
		-o ./taraxa_evm_cgo.a && \
	touch ok

submodules/openssl/ok:
	@echo Attempting to compile openssl 1.1.1, \
	if it fails try compiling it manually
	cd submodules/openssl; $(git_clean); \
	mkdir -p $(OPENSSL_HOME); \
	./config --prefix=$(OPENSSL_HOME) --openssldir=$(OPENSSL_HOME)/ssl; \
	$(MAKE) && $(MAKE) install && \
	touch ok

submodules/taraxa-vdf/ok: submodules/openssl/ok
	@echo Attempting to compile vdf, if it fails try compiling it manually
	cd submodules/taraxa-vdf; $(git_clean); \
	$(MAKE) OPENSSL_HOME=$(OPENSSL_HOME) && \
	touch ok

submodules/taraxa-vrf/ok:
	@echo Attempting to compile vrf, if it fails try compiling it manually
	cd submodules/taraxa-vrf; $(git_clean); \
	automake; \
	./configure; \
	$(MAKE) && \
	$(MAKE) install && \
	touch ok

dependencies: $(DEPENDENCIES)