// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/taraxa_grpc.proto

#include "proto/taraxa_grpc.pb.h"
#include "proto/taraxa_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace taraxa_grpc {

static const char* TaraxaProtoService_method_names[] = {
  "/taraxa_grpc.TaraxaProtoService/SendProtoTransaction",
  "/taraxa_grpc.TaraxaProtoService/GetProtoTransaction",
};

std::unique_ptr< TaraxaProtoService::Stub> TaraxaProtoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TaraxaProtoService::Stub> stub(new TaraxaProtoService::Stub(channel));
  return stub;
}

TaraxaProtoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendProtoTransaction_(TaraxaProtoService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProtoTransaction_(TaraxaProtoService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TaraxaProtoService::Stub::SendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::taraxa_grpc::SendProtoTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendProtoTransaction_, context, request, response);
}

void TaraxaProtoService::Stub::experimental_async::SendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendProtoTransaction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>* TaraxaProtoService::Stub::AsyncSendProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::taraxa_grpc::SendProtoTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendProtoTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>* TaraxaProtoService::Stub::PrepareAsyncSendProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::taraxa_grpc::SendProtoTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendProtoTransaction_, context, request, false);
}

::grpc::Status TaraxaProtoService::Stub::GetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::taraxa_grpc::ProtoTransaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProtoTransaction_, context, request, response);
}

void TaraxaProtoService::Stub::experimental_async::GetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProtoTransaction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>* TaraxaProtoService::Stub::AsyncGetProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::taraxa_grpc::ProtoTransaction>::Create(channel_.get(), cq, rpcmethod_GetProtoTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>* TaraxaProtoService::Stub::PrepareAsyncGetProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::taraxa_grpc::ProtoTransaction>::Create(channel_.get(), cq, rpcmethod_GetProtoTransaction_, context, request, false);
}

TaraxaProtoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaraxaProtoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaraxaProtoService::Service, ::taraxa_grpc::ProtoTransaction, ::taraxa_grpc::SendProtoTransactionResponse>(
          std::mem_fn(&TaraxaProtoService::Service::SendProtoTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaraxaProtoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaraxaProtoService::Service, ::taraxa_grpc::GetProtoTransactionRequest, ::taraxa_grpc::ProtoTransaction>(
          std::mem_fn(&TaraxaProtoService::Service::GetProtoTransaction), this)));
}

TaraxaProtoService::Service::~Service() {
}

::grpc::Status TaraxaProtoService::Service::SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaraxaProtoService::Service::GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace taraxa_grpc

