// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/transaction.proto
// Original file comments:
//
// @Copyright: Taraxa.io 
// @Author: Chia-Chun Lin 
// @Date: 2019-02-27 18:22:05 
// @Last Modified by: Chia-Chun Lin
// @Last Modified time: 2019-02-27 18:48:49
//
#ifndef GRPC_proto_2ftransaction_2eproto__INCLUDED
#define GRPC_proto_2ftransaction_2eproto__INCLUDED

#include "proto/transaction.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace taraxa_ledger {

class TaraxaLedgerService final {
 public:
  static constexpr char const* service_full_name() {
    return "taraxa_ledger.TaraxaLedgerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::taraxa_ledger::SendTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::SendTransactionResponse>> AsyncSendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::SendTransactionResponse>>(AsyncSendTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::SendTransactionResponse>> PrepareAsyncSendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::SendTransactionResponse>>(PrepareAsyncSendTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::taraxa_ledger::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::Transaction>> AsyncGetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::Transaction>>(AsyncGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::Transaction>> PrepareAsyncGetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::Transaction>>(PrepareAsyncGetTransactionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::SendTransactionResponse>* AsyncSendTransactionRaw(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::SendTransactionResponse>* PrepareAsyncSendTransactionRaw(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::Transaction>* AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_ledger::Transaction>* PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::taraxa_ledger::SendTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::SendTransactionResponse>> AsyncSendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::SendTransactionResponse>>(AsyncSendTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::SendTransactionResponse>> PrepareAsyncSendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::SendTransactionResponse>>(PrepareAsyncSendTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::taraxa_ledger::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::Transaction>> AsyncGetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::Transaction>>(AsyncGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::Transaction>> PrepareAsyncGetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::Transaction>>(PrepareAsyncGetTransactionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendTransaction(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTransaction(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::SendTransactionResponse>* AsyncSendTransactionRaw(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::SendTransactionResponse>* PrepareAsyncSendTransactionRaw(::grpc::ClientContext* context, const ::taraxa_ledger::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::Transaction>* AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taraxa_ledger::Transaction>* PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransaction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response);
    virtual ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendTransaction() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTransaction(::grpc::ServerContext* context, ::taraxa_ledger::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::taraxa_ledger::SendTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransaction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransaction(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::taraxa_ledger::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendTransaction<WithAsyncMethod_GetTransaction<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SendTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::taraxa_ledger::Transaction, ::taraxa_ledger::SendTransactionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::taraxa_ledger::Transaction* request,
                 ::taraxa_ledger::SendTransactionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::taraxa_ledger::Transaction>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::taraxa_ledger::Transaction* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SendTransaction<ExperimentalWithCallbackMethod_GetTransaction<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendTransaction() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransaction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendTransaction() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTransaction() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SendTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendTransaction() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::taraxa_ledger::Transaction, ::taraxa_ledger::SendTransactionResponse>(std::bind(&WithStreamedUnaryMethod_SendTransaction<BaseClass>::StreamedSendTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::taraxa_ledger::Transaction* request, ::taraxa_ledger::SendTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taraxa_ledger::Transaction,::taraxa_ledger::SendTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransaction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::taraxa_ledger::Transaction>(std::bind(&WithStreamedUnaryMethod_GetTransaction<BaseClass>::StreamedGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::taraxa_ledger::Transaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::taraxa_ledger::Transaction>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendTransaction<WithStreamedUnaryMethod_GetTransaction<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendTransaction<WithStreamedUnaryMethod_GetTransaction<Service > > StreamedService;
};

}  // namespace taraxa_ledger


#endif  // GRPC_proto_2ftransaction_2eproto__INCLUDED
